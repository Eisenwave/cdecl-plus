ScanfFormat
  = tokens:ScanfFormatToken* {
      return tokens;
  }

ScanfFormatToken
  = ScanfFormatSpecifier / ScanfFormatWhitespace / ScanfFormatLiteral

ScanfFormatSpecifier
  = "%"
  sup: "*"?
  width: FormatDecimalInteger?
  length:FormatLengthModifier
  end:ScanfConversionSpecifier
  {
      return {
          typ: "%",
          supressed: Boolean(sup),
          width,
          length,
          value: typeof(end) === 'string' ? end : '[]',
          negated: Boolean(end.negated),
          ranges: end.ranges ?? []
      };
  }

FormatInteger
  = "*" / FormatDecimalInteger

FormatDecimalInteger
  = ("0" / [1-9][0-9]*) {
    return Number(text());
  }

FormatLengthModifier
  = "hh" / "h" / "ll" / "l" / "j" / "z" / "t" / "L" / ""

ScanfFormatLiteral
  = [^ \t\n\r\"%]+ {
      return {
          typ: "literal",
          value: text()
      };
  }

ScanfFormatWhitespace
  = [ \t\n\r]+ {
      return {
          typ: "whitespace",
          value: text()
      };
  }

PrintfConversionSpecifier
  = [%csdioxXufFeEaAgGnp]

ScanfConversionSpecifier
  = PrintfConversionSpecifier / ScanfCharacterSet

ScanfCharacterSet
  = "[" n:"^"? ranges:(FormatSetRange / FormatSetSingleRange)* "]" {
      return {
          negated: Boolean(n),
          ranges
      };
  }

FormatSetRange
  = start:FormatSetCharacter "-" end:FormatSetCharacter {
      return [start, end];
  }

FormatSetSingleRange
  = c:FormatSetCharacter {
      return [c, c];
  }

FormatSetCharacter
  = escape:"\\"? c:[^\]] {
      return text();
  }
